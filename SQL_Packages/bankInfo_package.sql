CREATE OR REPLACE PACKAGE BANKPACKAGE IS
TYPE BANK_DATA IS RECORD (CARD_NUMBER BANKINFO.BANKINFO_CARD_NUMBER%TYPE, EXPDATE BANKINFO.BANKINFO_EXPIRATION_DATE%TYPE, ADRESS BANKINFO.BANKINFO_ADRESS%TYPE); 
TYPE CARD_DATA IS RECORD(CARD NUMBER);
TYPE TBLCARDDATA IS TABLE OF CARD_DATA;
TYPE TBLBANKDATA IS TABLE OF BANK_DATA;
FUNCTION GET_BANK_DATA(USERLOGIN IN VARCHAR2) RETURN TBLBANKDATA PIPELINED;
FUNCTION GET_CARD(USERLOGIN IN VARCHAR2) RETURN TBLCARDDATA PIPELINED;
FUNCTION GET_BANK_DATA(CARDNUM IN NUMBER) RETURN TBLBANKDATA PIPELINED;
FUNCTION DELETE_PAYMENT (USERLOG IN VARCHAR2, CARD_NUM IN NUMBER) RETURN VARCHAR2;
FUNCTION ADD_PAYMENT (USERLOG IN VARCHAR2, CARDNUM IN NUMBER, EXP_DATE IN VARCHAR2, ADRESS IN VARCHAR2) RETURN VARCHAR2;
FUNCTION UPDATE_PAYMENT(USERLOGIN IN VARCHAR2,OLDCARDNUM IN NUMBER,NEWCARDNUM IN NUMBER, EXP_DATE IN VARCHAR2 DEFAULT NULL, ADRESS IN VARCHAR2 DEFAULT NULL) RETURN VARCHAR2;
END BANKPACKAGE;
/
CREATE OR REPLACE PACKAGE BODY BANKPACKAGE IS
FUNCTION GET_CARD(USERLOGIN IN VARCHAR2) RETURN TBLCARDDATA PIPELINED
IS
BEGIN
    FOR CURR IN (
    SELECT BANKINFO_CARD_NUMBER FROM BANKINFO WHERE USER_LOGIN=USERLOGIN
    ) LOOP
        PIPE ROW (CURR);
    END LOOP;
END GET_CARD;
FUNCTION GET_BANK_DATA(USERLOGIN IN VARCHAR2) RETURN TBLBANKDATA PIPELINED
IS
BEGIN
    FOR CURR IN (
    SELECT BANKINFO_CARD_NUMBER, BANKINFO_EXPIRATION_DATE, BANKINFO_ADRESS FROM BANKINFO WHERE USER_LOGIN=USERLOGIN
    ) LOOP
        PIPE ROW (CURR);
    END LOOP;
END GET_BANK_DATA;
FUNCTION GET_BANK_DATA(CARDNUM IN NUMBER) RETURN TBLBANKDATA PIPELINED
IS
BEGIN
    FOR CURR IN (
    SELECT BANKINFO_CARD_NUMBER, BANKINFO_EXPIRATION_DATE, BANKINFO_ADRESS FROM BANKINFO WHERE BANKINFO_CARD_NUMBER=CARDNUM
    ) LOOP
        PIPE ROW (CURR);
    END LOOP;
END GET_BANK_DATA;
FUNCTION UPDATE_PAYMENT(USERLOGIN IN VARCHAR2, OLDCARDNUM IN NUMBER,NEWCARDNUM IN NUMBER, EXP_DATE IN VARCHAR2 DEFAULT NULL, ADRESS IN VARCHAR2 DEFAULT NULL) RETURN VARCHAR2 IS
COUNTER NUMBER;
CARDIF NUMBER;
USERLOG VARCHAR2(40);
BEGIN
    SELECT COUNT(BANKINFO_CARD_NUMBER) INTO COUNTER FROM BANKINFO WHERE BANKINFO_CARD_NUMBER=OLDCARDNUM;
    IF COUNTER < 1 THEN RETURN 'FALSE counter'; END IF;
    SELECT USER_LOGIN INTO USERLOG FROM BANKINFO WHERE OLDCARDNUM=BANKINFO_CARD_NUMBER;
    IF USERLOG<>USERLOGIN THEN RETURN 'FALSE login';
    END IF;
     IF EXP_DATE IS NOT NULL THEN
        UPDATE BANKINFO SET BANKINFO_EXPIRATION_DATE=TO_DATE(EXP_DATE, 'yyyy/mm/dd') WHERE BANKINFO_CARD_NUMBER=OLDCARDNUM;
        END IF;
        IF ADRESS IS NOT NULL THEN 
        UPDATE BANKINFO SET BANKINFO_ADRESS=ADRESS WHERE BANKINFO_CARD_NUMBER=OLDCARDNUM;
        END IF;
    UPDATE BANKINFO SET BANKINFO_CARD_NUMBER=NEWCARDNUM WHERE BANKINFO_CARD_NUMBER=OLDCARDNUM;
    RETURN 'TRUE';
      EXCEPTION WHEN DUP_VAL_ON_INDEX THEN RETURN 'FALSE';
    WHEN OTHERS THEN RETURN 'FALSE other';
END UPDATE_PAYMENT;
FUNCTION DELETE_PAYMENT (USERLOG IN VARCHAR2, CARD_NUM IN NUMBER) RETURN VARCHAR2 IS
USERLOGIN VARCHAR2(30);
UNUMBER NUMBER;
BEGIN
    SELECT USER_LOGIN INTO USERLOGIN FROM BANKINFO WHERE BANKINFO_CARD_NUMBER=CARD_NUM;
    IF USERLOG <> USERLOGIN THEN RETURN 'FALSE'; END IF;
    SELECT  COUNT(USER_LOGIN)INTO UNUMBER FROM BANKINFO WHERE USER_LOGIN=USERLOGIN;
    IF UNUMBER >1 THEN
    DELETE FROM BANKINFO WHERE BANKINFO_CARD_NUMBER=CARD_NUM; RETURN 'TRUE';
    ELSE DBMS_OUTPUT.PUT_LINE('CANT DO THAT'); RETURN 'FALSE';
    END IF;
    EXCEPTION
    WHEN OTHERS THEN RETURN 'FALSE OTHERS';
END DELETE_PAYMENT;
FUNCTION ADD_PAYMENT (USERLOG IN VARCHAR2, CARDNUM IN NUMBER, EXP_DATE IN VARCHAR2, ADRESS IN VARCHAR2) RETURN VARCHAR2 IS 
COUNTER NUMBER;
BEGIN
    SELECT COUNT(BANKINFO_CARD_NUMBER) INTO COUNTER FROM BANKINFO WHERE BANKINFO_CARD_NUMBER=CARDNUM;
    IF COUNTER > 1 THEN RETURN 'FALSE';
    ELSE
        INSERT INTO BANKINFO (USER_LOGIN, BANKINFO_CARD_NUMBER, BANKINFO_EXPIRATION_DATE, BANKINFO_ADRESS) VALUES (USERLOG, CARDNUM, TO_DATE(EXP_DATE, 'yyyy/mm/dd'), ADRESS);
    END IF;
    RETURN 'TRUE';
      EXCEPTION WHEN DUP_VAL_ON_INDEX THEN RETURN 'FALSE';
    WHEN OTHERS THEN RETURN 'FALSE';
END ADD_PAYMENT;
END BANKPACKAGE;
